package modelExt;import java.util.List;import myLib.utils.Utils;import randomNumbers.AbstractRandom;/** * 一次元酔歩モデルのシミュレーション：連続的な乱数生成器に対応 * * 多数のwalkerを同時に動かす * * @author tadaki */public class SimulationExt {    private final List<WalkerExt> walkers;//Walkerのリスト    private final AbstractRandom abstractRandom;//乱数生成器    private int n;//walkerの数    /**     * コンストラクタ     *     * @param abstractRandom 乱数生成器     * @param n Wlakerの数     */    public SimulationExt(AbstractRandom abstractRandom, int n) {        walkers = Utils.createList();        this.abstractRandom = abstractRandom;        this.n = n;        // Walkerを初期化        for (int i = 0; i < n; i++) {            walkers.add(new WalkerExt(abstractRandom, 0.));        }    }    /**     * 全てのWalkerの情報を消去し、新たにリストを生成     */    public void initialize() {        walkers.clear();        for (int i = 0; i < n; i++) {            walkers.add(new WalkerExt(abstractRandom, 0.));        }    }    /**     * 一時間ステップの動作     *     * @return 更新したWalkerの位置の一覧     */    public List<Double> oneStep() {        List<Double> pList = Utils.createList();        //リストwalkers中の各要素にたいして、移動を行う        //さらに、それぞれの位置をpListに格納する        walkers.stream().map(w -> w.walk()).                forEachOrdered(x -> pList.add(x));        return pList;    }    public List<WalkerExt> getWalkers() {        return walkers;    }    public void setN(int n) {        this.n = n;    }}